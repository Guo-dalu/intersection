(function(){"use strict";const g=[10,1e3],T=[1e4,5e5],h="runSingleIntersection",A="runMultipleIntersection",d="singleIntersectionResult",E="multipleIntersectionResult",L="error",u=(e=>(...t)=>{const s=performance.now(),n=e(...t),r=performance.now();return{result:n,time:r-s}})((e,t)=>{const s=new Set(t);return e.filter(n=>s.has(n)).length}),a=e=>Array.from({length:e}).map(()=>Math.round(Math.random()*(e-1))),l=({min:e=0,max:t=1})=>{if(t<=e)throw new Error("max should be greater than min");return e+Math.round(Math.random()*(t-e))},M=({size1:e,size2:t,iterateCollection:s})=>{const n=s==="A"?e:t,r=s==="B"?e:t,i=a(n),o=a(r),{time:c,result:m}=u(i,o);return{time:c,commonSize:m}},R=({smallRange:e=g,largeRange:t=T,times:s})=>{const n=[],r=[];for(let i=0;i<s;i++){const o=l({min:e[0],max:e[1]}),c=l({min:t[0],max:t[1]}),m=o+c,S=a(o),I=a(c),{time:p}=u(S,I);r.push({size1:o,size2:c,sum:m,time:p});const{time:_}=u(I,S);n.push({size1:o,size2:c,sum:m,time:_})}return{smallToSetList:n,largeToSetList:r}};onmessage=e=>{const{message:t,data:s}=e.data;try{switch(t){case h:postMessage({message:d,data:M(s)});break;case A:postMessage({message:E,data:R(s)});break;default:break}}catch{postMessage({message:L})}}})();
